//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/mac/rofMac/RofPacket.msg.
//

#ifndef _ROFPACKET_M_H_
#define _ROFPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "MacPacket_m.h"
// }}

/**
 * Class generated from <tt>src/node/communication/mac/rofMac/RofPacket.msg:5</tt> by nedtool.
 * <pre>
 * packet RofPacket extends MacPacket
 * {
 *     //sender adds location information in its packets
 *     double senderX;
 *     double senderY;
 *     int senderID;
 *     //sender can send data, ATF or busy packet
 *     int packetType;
 *     //eacch node is assigned unique ID
 *     int packetID;
 *     //where the packet is supposed to go
 *     int sinkAddress;
 * }
 * </pre>
 */
class RofPacket : public ::MacPacket
{
  protected:
    double senderX_var;
    double senderY_var;
    int senderID_var;
    int packetType_var;
    int packetID_var;
    int sinkAddress_var;

  private:
    void copy(const RofPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RofPacket&);

  public:
    RofPacket(const char *name=NULL, int kind=0);
    RofPacket(const RofPacket& other);
    virtual ~RofPacket();
    RofPacket& operator=(const RofPacket& other);
    virtual RofPacket *dup() const {return new RofPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getSenderX() const;
    virtual void setSenderX(double senderX);
    virtual double getSenderY() const;
    virtual void setSenderY(double senderY);
    virtual int getSenderID() const;
    virtual void setSenderID(int senderID);
    virtual int getPacketType() const;
    virtual void setPacketType(int packetType);
    virtual int getPacketID() const;
    virtual void setPacketID(int packetID);
    virtual int getSinkAddress() const;
    virtual void setSinkAddress(int sinkAddress);
};

inline void doPacking(cCommBuffer *b, RofPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RofPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _ROFPACKET_M_H_

